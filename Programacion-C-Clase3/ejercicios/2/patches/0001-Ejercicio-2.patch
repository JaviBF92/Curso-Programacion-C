From 8eed3b628dbc2fbe8199f305d9972b8ee814333f Mon Sep 17 00:00:00 2001
From: JaviBF92 <jafibf_92@hotmail.com>
Date: Fri, 20 Mar 2015 01:26:50 +0100
Subject: [PATCH] Ejercicio 2
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

Contiene un pequeño error (imprime la opción help cuando no debería).

Incluido autoconf-automake, y copia del mensaje de valgrind

Signed-off-by: JaviBF92 <jafibf_92@hotmail.com>
---
 ejercicios/2/Makefile.am              |   2 +
 ejercicios/2/configure.ac             |  11 ++
 ejercicios/2/includes/coche.h         |  43 ++++++
 ejercicios/2/includes/concesionario.h |  32 +++++
 ejercicios/2/includes/list.h          | 244 ++++++++++++++++++++++++++++++++++
 ejercicios/2/src/Makefile.am          |   2 +
 ejercicios/2/src/coche.c              | 122 +++++++++++++++++
 ejercicios/2/src/concesionario.c      | 171 ++++++++++++++++++++++++
 ejercicios/2/src/main.c               |  83 ++++++++++++
 ejercicios/2/valgrind/valgrind.log    |  21 +++
 10 files changed, 731 insertions(+)
 create mode 100644 ejercicios/2/Makefile.am
 create mode 100644 ejercicios/2/configure.ac
 create mode 100644 ejercicios/2/includes/coche.h
 create mode 100644 ejercicios/2/includes/concesionario.h
 create mode 100644 ejercicios/2/includes/list.h
 create mode 100644 ejercicios/2/src/Makefile.am
 create mode 100644 ejercicios/2/src/coche.c
 create mode 100644 ejercicios/2/src/concesionario.c
 create mode 100644 ejercicios/2/src/main.c
 create mode 100644 ejercicios/2/valgrind/valgrind.log

diff --git a/ejercicios/2/Makefile.am b/ejercicios/2/Makefile.am
new file mode 100644
index 0000000..f83dcbb
--- /dev/null
+++ b/ejercicios/2/Makefile.am
@@ -0,0 +1,2 @@
+AUTOMAKE_OPTIONS = foreign
+SUBDIRS = src
\ No newline at end of file
diff --git a/ejercicios/2/configure.ac b/ejercicios/2/configure.ac
new file mode 100644
index 0000000..5617b65
--- /dev/null
+++ b/ejercicios/2/configure.ac
@@ -0,0 +1,11 @@
+ 
+AC_INIT([ej2],[1.0], [javibf_92@hotmail.com]) 
+
+AM_INIT_AUTOMAKE([-Wall -Werror foreign])
+
+AC_CONFIG_SRCDIR([src/main.c])
+AC_PROG_CC
+AC_CHECK_HEADERS([stdlib.h stdint.h stdbool.h])
+AC_FUNC_MALLOC
+
+AC_OUTPUT(Makefile src/Makefile)
\ No newline at end of file
diff --git a/ejercicios/2/includes/coche.h b/ejercicios/2/includes/coche.h
new file mode 100644
index 0000000..319dd33
--- /dev/null
+++ b/ejercicios/2/includes/coche.h
@@ -0,0 +1,43 @@
+#include <stdio.h>
+#include <stdint.h>
+#include <stdlib.h>
+#include <stdbool.h>
+#include "list.h"
+
+enum {
+	CURSO_COCHE_ATTR_MARCA,
+	CURSO_COCHE_ATTR_MATRICULA,
+	CURSO_COCHE_ATTR_ID,
+	__CURSO_COCHE_ATTR_MAX
+};
+
+#define CURSO_COCHE_ATTR_MAX (__CURSO_COCHE_ATTR_MAX - 1)
+
+#define xfree(ptr)      free((void *)ptr);
+
+struct coche {
+	struct list_head	head;
+	uint32_t		id;
+	const char      	*matricula;
+	const char		*marca;
+
+	uint32_t		flags;
+};
+
+struct coche *curso_coche_alloc(void);
+void curso_coche_free(struct coche *);
+
+bool curso_coche_attr_is_set(const struct coche *c, uint16_t attr);
+
+void curso_coche_attr_unset(struct coche *c, uint16_t attr);
+
+void curso_coche_attr_set_data(struct coche *c, uint16_t attr, const void *data,
+			       uint32_t data_len);
+void curso_coche_attr_set_u32(struct coche *c, uint16_t attr, uint32_t data);
+void curso_coche_attr_set_str(struct coche *c, uint16_t attr, const char *data);
+
+const void *curso_coche_attr_get_data(struct coche *c, uint16_t attr);
+uint32_t curso_coche_attr_get_u32(struct coche *c, uint16_t attr);
+const char *curso_coche_attr_get_str(struct coche *c, uint16_t attr);
+
+int curso_coche_snprintf(char *buf, size_t size, struct coche *c);
diff --git a/ejercicios/2/includes/concesionario.h b/ejercicios/2/includes/concesionario.h
new file mode 100644
index 0000000..b3ae212
--- /dev/null
+++ b/ejercicios/2/includes/concesionario.h
@@ -0,0 +1,32 @@
+#include "coche.h"
+
+enum {
+	CURSO_CONCESIONARIO_ATTR_COCHE,
+	CURSO_CONCESIONARIO_ATTR_DUENO,
+	CURSO_CONCESIONARIO_ATTR_NUM_COCHES,
+	__CURSO_CONCESIONARIO_ATTR_MAX
+};
+
+#define CURSO_CONCESIONARIO_ATTR_MAX (__CURSO_CONCESIONARIO_ATTR_MAX - 1)
+
+struct concesionario;
+
+struct concesionario *curso_concesionario_alloc(void);
+void curso_concesionario_free(struct concesionario *);
+
+void curso_concesionario_attr_unset_coche(struct concesionario *con,
+					  uint32_t pos);
+
+void curso_concesionario_attr_set_str(struct concesionario *con, uint16_t attr,
+				      const char *data);
+void curso_concesionario_attr_set_coche(struct concesionario *con,
+					uint16_t attr, struct coche *c);
+
+uint32_t curso_concesionario_attr_get_u32(struct concesionario *con,
+					  uint16_t attr);
+const char *curso_concesionario_attr_get_str(struct concesionario *con,
+					     uint16_t attr);
+struct coche *curso_concesionario_attr_get_coche(struct concesionario *con,
+						 uint16_t attr, uint32_t pos);
+
+int curso_concesionario_snprintf(char *buf, size_t size, struct concesionario *c);
diff --git a/ejercicios/2/includes/list.h b/ejercicios/2/includes/list.h
new file mode 100644
index 0000000..3a76885
--- /dev/null
+++ b/ejercicios/2/includes/list.h
@@ -0,0 +1,244 @@
+#ifndef __LIST_H
+#define __LIST_H
+
+/* This file is from Linux Kernel (include/linux/list.h) 
+ * and modified by simply removing hardware prefetching of list items. 
+ * Here by copyright, credits attributed to wherever they belong.
+ * Kulesh Shanmugasundaram (kulesh [squiggly] isis.poly.edu)
+ */
+
+/*
+ * Simple doubly linked list implementation.
+ *
+ * Some of the internal functions ("__xxx") are useful when
+ * manipulating whole lists rather than single entries, as
+ * sometimes we already know the next/prev entries and we can
+ * generate better code by using them directly rather than
+ * using the generic single-entry routines.
+ */
+
+struct list_head {
+	struct list_head *next, *prev;
+};
+
+#define LIST_HEAD_INIT(name) { &(name), &(name) }
+
+#define LIST_HEAD(name) \
+	struct list_head name = LIST_HEAD_INIT(name)
+
+#define INIT_LIST_HEAD(ptr) do { \
+	(ptr)->next = (ptr); (ptr)->prev = (ptr); \
+} while (0)
+
+/*
+ * Insert a new entry between two known consecutive entries. 
+ *
+ * This is only for internal list manipulation where we know
+ * the prev/next entries already!
+ */
+static inline void __list_add(struct list_head *new,
+			      struct list_head *prev,
+			      struct list_head *next)
+{
+	next->prev = new;
+	new->next = next;
+	new->prev = prev;
+	prev->next = new;
+}
+
+/**
+ * list_add - add a new entry
+ * @new: new entry to be added
+ * @head: list head to add it after
+ *
+ * Insert a new entry after the specified head.
+ * This is good for implementing stacks.
+ */
+static inline void list_add(struct list_head *new, struct list_head *head)
+{
+	__list_add(new, head, head->next);
+}
+
+/**
+ * list_add_tail - add a new entry
+ * @new: new entry to be added
+ * @head: list head to add it before
+ *
+ * Insert a new entry before the specified head.
+ * This is useful for implementing queues.
+ */
+static inline void list_add_tail(struct list_head *new, struct list_head *head)
+{
+	__list_add(new, head->prev, head);
+}
+
+/*
+ * Delete a list entry by making the prev/next entries
+ * point to each other.
+ *
+ * This is only for internal list manipulation where we know
+ * the prev/next entries already!
+ */
+static inline void __list_del(struct list_head *prev, struct list_head *next)
+{
+	next->prev = prev;
+	prev->next = next;
+}
+
+/**
+ * list_del - deletes entry from list.
+ * @entry: the element to delete from the list.
+ * Note: list_empty on entry does not return true after this, the entry is in an undefined state.
+ */
+static inline void list_del(struct list_head *entry)
+{
+	__list_del(entry->prev, entry->next);
+	entry->next = (void *) 0;
+	entry->prev = (void *) 0;
+}
+
+/**
+ * list_del_init - deletes entry from list and reinitialize it.
+ * @entry: the element to delete from the list.
+ */
+static inline void list_del_init(struct list_head *entry)
+{
+	__list_del(entry->prev, entry->next);
+	INIT_LIST_HEAD(entry); 
+}
+
+/**
+ * list_move - delete from one list and add as another's head
+ * @list: the entry to move
+ * @head: the head that will precede our entry
+ */
+static inline void list_move(struct list_head *list, struct list_head *head)
+{
+        __list_del(list->prev, list->next);
+        list_add(list, head);
+}
+
+/**
+ * list_move_tail - delete from one list and add as another's tail
+ * @list: the entry to move
+ * @head: the head that will follow our entry
+ */
+static inline void list_move_tail(struct list_head *list,
+				  struct list_head *head)
+{
+        __list_del(list->prev, list->next);
+        list_add_tail(list, head);
+}
+
+/**
+ * list_empty - tests whether a list is empty
+ * @head: the list to test.
+ */
+static inline int list_empty(struct list_head *head)
+{
+	return head->next == head;
+}
+
+static inline void __list_splice(struct list_head *list,
+				 struct list_head *head)
+{
+	struct list_head *first = list->next;
+	struct list_head *last = list->prev;
+	struct list_head *at = head->next;
+
+	first->prev = head;
+	head->next = first;
+
+	last->next = at;
+	at->prev = last;
+}
+
+/**
+ * list_splice - join two lists
+ * @list: the new list to add.
+ * @head: the place to add it in the first list.
+ */
+static inline void list_splice(struct list_head *list, struct list_head *head)
+{
+	if (!list_empty(list))
+		__list_splice(list, head);
+}
+
+/**
+ * list_splice_init - join two lists and reinitialise the emptied list.
+ * @list: the new list to add.
+ * @head: the place to add it in the first list.
+ *
+ * The list at @list is reinitialised
+ */
+static inline void list_splice_init(struct list_head *list,
+				    struct list_head *head)
+{
+	if (!list_empty(list)) {
+		__list_splice(list, head);
+		INIT_LIST_HEAD(list);
+	}
+}
+
+/**
+ * list_entry - get the struct for this entry
+ * @ptr:	the &struct list_head pointer.
+ * @type:	the type of the struct this is embedded in.
+ * @member:	the name of the list_struct within the struct.
+ */
+#define list_entry(ptr, type, member) \
+	((type *)((char *)(ptr)-(unsigned long)(&((type *)0)->member)))
+
+/**
+ * list_for_each	-	iterate over a list
+ * @pos:	the &struct list_head to use as a loop counter.
+ * @head:	the head for your list.
+ */
+#define list_for_each(pos, head) \
+	for (pos = (head)->next; pos != (head); \
+        	pos = pos->next)
+/**
+ * list_for_each_prev	-	iterate over a list backwards
+ * @pos:	the &struct list_head to use as a loop counter.
+ * @head:	the head for your list.
+ */
+#define list_for_each_prev(pos, head) \
+	for (pos = (head)->prev; pos != (head); \
+        	pos = pos->prev)
+        	
+/**
+ * list_for_each_safe	-	iterate over a list safe against removal of list entry
+ * @pos:	the &struct list_head to use as a loop counter.
+ * @n:		another &struct list_head to use as temporary storage
+ * @head:	the head for your list.
+ */
+#define list_for_each_safe(pos, n, head) \
+	for (pos = (head)->next, n = pos->next; pos != (head); \
+		pos = n, n = pos->next)
+
+/**
+ * list_for_each_entry	-	iterate over list of given type
+ * @pos:	the type * to use as a loop counter.
+ * @head:	the head for your list.
+ * @member:	the name of the list_struct within the struct.
+ */
+#define list_for_each_entry(pos, head, member)				\
+	for (pos = list_entry((head)->next, typeof(*pos), member);	\
+	     &pos->member != (head); 					\
+	     pos = list_entry(pos->member.next, typeof(*pos), member))
+
+/**
+ * list_for_each_entry_safe - iterate over list of given type safe against removal of list entry
+ * @pos:	the type * to use as a loop counter.
+ * @n:		another type * to use as temporary storage
+ * @head:	the head for your list.
+ * @member:	the name of the list_struct within the struct.
+ */
+#define list_for_each_entry_safe(pos, n, head, member)			\
+	for (pos = list_entry((head)->next, typeof(*pos), member),	\
+		n = list_entry(pos->member.next, typeof(*pos), member);	\
+	     &pos->member != (head); 					\
+	     pos = n, n = list_entry(n->member.next, typeof(*n), member))
+
+
+#endif
diff --git a/ejercicios/2/src/Makefile.am b/ejercicios/2/src/Makefile.am
new file mode 100644
index 0000000..36cae6f
--- /dev/null
+++ b/ejercicios/2/src/Makefile.am
@@ -0,0 +1,2 @@
+bin_PROGRAMS = ej2
+ej2_SOURCES = main.c concesionario.c coche.c
\ No newline at end of file
diff --git a/ejercicios/2/src/coche.c b/ejercicios/2/src/coche.c
new file mode 100644
index 0000000..9736eb8
--- /dev/null
+++ b/ejercicios/2/src/coche.c
@@ -0,0 +1,122 @@
+#include "../includes/coche.h"
+#include <string.h>
+
+struct coche *curso_coche_alloc(void)
+{
+	struct coche *c =  (struct coche *)malloc(sizeof(struct coche));
+	memset(c, 0, (sizeof(struct coche)));
+	return c;
+}
+
+void curso_coche_free(struct coche *c)
+{
+	if (c->flags & (1 << CURSO_COCHE_ATTR_MARCA))
+		xfree(c->marca);
+
+	if (c->flags & (1 << CURSO_COCHE_ATTR_MATRICULA))
+		xfree(c->matricula);
+
+	xfree(c);
+}
+
+bool curso_coche_attr_is_set(const struct coche *c, uint16_t attr)
+{
+	return c->flags & (1 << attr);
+}
+
+void curso_coche_attr_unset(struct coche *c, uint16_t attr)
+{
+	if (!(c->flags & (1 << attr)))
+		return;
+
+	switch (attr) {
+	case CURSO_COCHE_ATTR_MARCA:
+		if (c->marca) {
+			xfree(c->marca);
+			c->marca = NULL;
+		}
+		break;
+	case CURSO_COCHE_ATTR_MATRICULA:
+		if (c->matricula) {
+			xfree(c->matricula);
+			c->matricula = NULL;
+		}
+		break;
+	case CURSO_COCHE_ATTR_ID:
+		break;
+	}
+
+	c->flags &= ~(1 << attr);
+}
+
+void curso_coche_set_data(struct coche *c, uint16_t attr, const void *data,
+			  uint32_t data_len)
+{
+	if (attr > CURSO_COCHE_ATTR_MAX)
+		return;
+
+	switch (attr) {
+	case CURSO_COCHE_ATTR_MARCA:
+		if (c->marca)
+			xfree(c->marca);
+
+		c->marca = strdup(data);
+		break;
+	case CURSO_COCHE_ATTR_MATRICULA:
+		if (c->matricula)
+			xfree(c->matricula);
+
+		c->matricula = strdup(data);
+		break;
+	case CURSO_COCHE_ATTR_ID:
+		c->id = *((uint32_t *)data);
+		break;
+	}
+
+	c->flags |= (1 << attr);
+}
+
+void curso_coche_attr_set_u32(struct coche *c, uint16_t attr, uint32_t data)
+{
+	curso_coche_set_data(c, attr, &data, sizeof(uint32_t));
+}
+
+void curso_coche_attr_set_str(struct coche *c, uint16_t attr, const char *data)
+{
+	curso_coche_set_data(c, attr, data, 0);
+}
+
+const void *curso_coche_attr_get_data(struct coche *c, uint16_t attr)
+{
+	if (!(c->flags & (1 << attr)))
+		return NULL;
+
+	switch(attr) {
+	case CURSO_COCHE_ATTR_MARCA:
+		return c->marca;
+	case CURSO_COCHE_ATTR_MATRICULA:
+		return c->matricula;
+	case CURSO_COCHE_ATTR_ID:
+		return &c->id;
+	}
+	return NULL;
+}
+
+uint32_t curso_coche_attr_get_u32(struct coche *c, uint16_t attr)
+{
+	const void *ret = curso_coche_attr_get_data(c, attr);
+	return ret == NULL ? 0 : *((uint32_t *)ret);
+}
+
+const char *curso_coche_attr_get_str(struct coche *c, uint16_t attr)
+{
+	return curso_coche_attr_get_data(c, attr);
+}
+
+int curso_coche_snprintf(char *buf, size_t size, struct coche *c)
+{
+	return snprintf(buf, size, "matricula %s marca %s id %d",
+			curso_coche_attr_get_str(c, CURSO_COCHE_ATTR_MATRICULA), 
+			curso_coche_attr_get_str(c, CURSO_COCHE_ATTR_MARCA), 
+			curso_coche_attr_get_u32(c, CURSO_COCHE_ATTR_ID));
+}
diff --git a/ejercicios/2/src/concesionario.c b/ejercicios/2/src/concesionario.c
new file mode 100644
index 0000000..12638f5
--- /dev/null
+++ b/ejercicios/2/src/concesionario.c
@@ -0,0 +1,171 @@
+#include "../includes/concesionario.h"
+#include <string.h>
+
+struct concesionario {
+	struct list_head	garaje;
+	const char      	*dueno;
+	uint32_t		num_coches;
+
+	uint32_t		flags;
+};
+
+struct concesionario *curso_concesionario_alloc(void)
+{
+	struct concesionario *con;
+
+	con = malloc(sizeof(struct concesionario));
+	if (con ==  NULL)
+		return NULL;
+
+	memset(con, 0, (sizeof(struct concesionario)));
+	
+	INIT_LIST_HEAD(&con->garaje);
+	
+	con->flags |= (1 << CURSO_CONCESIONARIO_ATTR_NUM_COCHES);
+
+	return con;
+}
+
+void curso_concesionario_free(struct concesionario *con)
+{
+	int i;
+	struct coche *c, *tmp;
+
+	if (con->flags & (1 << CURSO_CONCESIONARIO_ATTR_DUENO))
+		xfree(con->dueno);
+
+	list_for_each_entry_safe(c, tmp, &con->garaje, head) {
+		list_del(&c->head);
+		curso_coche_free(c);
+	}
+
+	xfree(con);
+}
+
+void curso_concesionario_attr_unset_coche(struct concesionario *con,
+					  uint32_t pos)
+{
+	int i = 0;
+	struct coche *c, *tmp;
+
+	if (pos < 0 || pos > con->num_coches)
+		return;
+
+	list_for_each_entry_safe(c, tmp, &con->garaje, head) {
+		if (i == pos) {
+			list_del(&c->head);
+			curso_coche_free(c);
+			break;
+		}
+
+		i++;
+	}
+
+	con->num_coches--;
+}
+
+static void curso_concesionario_set_data(struct concesionario *con,
+					 uint16_t attr, const void *data)
+{
+	struct coche *c;
+
+	if (attr > CURSO_CONCESIONARIO_ATTR_MAX)
+		return;
+
+	switch (attr) {
+	case CURSO_CONCESIONARIO_ATTR_DUENO:
+		if (con->dueno)
+			xfree(con->dueno);
+
+		con->dueno = strdup(data);
+		break;
+	case CURSO_CONCESIONARIO_ATTR_COCHE:
+		if (con->num_coches > 50) {
+			printf("El garaje esta lleno\n");
+			break;
+		}
+		c = (struct coche *)data;
+		list_add(&c->head, &con->garaje);
+		con->num_coches++;
+		break;
+	}
+
+	con->flags |= (1 << attr);
+}
+
+void curso_concesionario_attr_set_str(struct concesionario *con,
+					uint16_t attr, const char *data)
+{
+	curso_concesionario_set_data(con, attr, data);
+}
+
+void curso_concesionario_attr_set_coche(struct concesionario *con,
+					  uint16_t attr, struct coche *data)
+{
+	curso_concesionario_set_data(con, attr, data);
+}
+
+const void *curso_concesionario_attr_get_data(struct concesionario *con,
+					      uint16_t attr, uint32_t pos)
+{
+	int i = 0;
+	struct coche *c;
+
+	if (!(con->flags & (1 << attr)))
+		return NULL;
+
+	switch(attr) {
+	case CURSO_CONCESIONARIO_ATTR_DUENO:
+		return con->dueno;
+	case CURSO_CONCESIONARIO_ATTR_NUM_COCHES:
+		return &con->num_coches;
+	case CURSO_CONCESIONARIO_ATTR_COCHE:
+		list_for_each_entry(c, &con->garaje, head) {
+			if (i == pos)
+				break;
+
+			i++;
+		}
+
+		return c;
+	}
+	return NULL;
+}
+
+uint32_t curso_concesionario_attr_get_u32(struct concesionario *con,
+					  uint16_t attr)
+{
+	const void *ret = curso_concesionario_attr_get_data(con, attr, 0);
+	return ret == NULL ? 0 : *((uint32_t *)ret);
+}
+
+const char *curso_concesionario_attr_get_str(struct concesionario *con,
+					     uint16_t attr)
+{
+	return curso_concesionario_attr_get_data(con, attr, 0);
+}
+
+struct coche *curso_concesionario_attr_get_coche(struct concesionario *con,
+					         uint16_t attr, uint32_t pos)
+{
+	return (struct coche *)curso_concesionario_attr_get_data(con, attr,
+								 pos);
+}
+
+int curso_concesionario_snprintf(char *buf, size_t size,
+				 struct concesionario *con)
+{
+	int ret = 0;
+	struct coche *c;
+
+	ret += snprintf(buf, size,
+			"el concesionario propiedad de %s, tiene %d y son:\n",
+			con->dueno, con->num_coches);
+
+	list_for_each_entry(c, &con->garaje, head) {
+		ret += curso_coche_snprintf(buf + ret, size - ret, c);
+		ret += snprintf(buf + ret, size - ret, "\n");
+	}
+
+	return ret;
+}
diff --git a/ejercicios/2/src/main.c b/ejercicios/2/src/main.c
new file mode 100644
index 0000000..99838fe
--- /dev/null
+++ b/ejercicios/2/src/main.c
@@ -0,0 +1,83 @@
+#include "../includes/concesionario.h"
+#include <getopt.h>
+
+int main(int argc, char *argv[])
+{
+	struct coche *c1;
+	struct concesionario *con;
+	char info[4000];
+	char *argumento;
+	int arg;
+
+	int val, cont = 0, option_index = 0;
+	
+	static struct option long_options[] = {
+		{"matricula", required_argument, 0, 'm'},
+		{"id", required_argument, 0, 'i'},
+		{"gama", required_argument, 0, 'g'},
+		{"dueño", required_argument, 0, 'd'},
+		{"help", optional_argument, 0, 'h'},
+		{0}
+	};
+	
+	c1 = curso_coche_alloc();
+
+	con = curso_concesionario_alloc();
+	
+	val = 0;
+	
+	while(val != -1){
+		
+		val = getopt_long(argc, argv, "m:i:g:d:h", long_options, &option_index);
+		
+		cont++;
+		switch(val){
+			case 'm':
+				argumento = optarg;
+				printf("Matrícula: %s \n", argumento);
+				curso_coche_attr_set_str(c1, CURSO_COCHE_ATTR_MATRICULA, 
+							 argumento);
+				break;
+			case 'i':
+				arg = atoi(optarg);
+				printf("ID: %d \n", arg);
+				curso_coche_attr_set_u32(c1, 
+							 CURSO_COCHE_ATTR_ID, 
+							 arg);
+				break;
+			case 'g':
+				argumento = optarg;
+				printf("Gama: %s \n", argumento);
+				curso_coche_attr_set_str(c1, 
+							 CURSO_COCHE_ATTR_MARCA, 
+							 argumento);
+				break;
+			case 'd':
+				argumento = optarg;
+				printf("Dueño: %s \n", argumento);
+				curso_concesionario_attr_set_str(con,
+							 CURSO_CONCESIONARIO_ATTR_DUENO, 
+							 argumento);
+				break;
+			case 'h':
+			default :
+				printf("Recomendamos el uso de -m/-matricula,"\
+				"-i/-id, -g/-gama, -d/-dueno \n");
+				break;
+		}
+	}
+	
+	if(cont < 4){
+		printf("No se han introducido todos los valores necesarios \n");
+		return -1;
+	}	
+
+	curso_concesionario_attr_set_coche(con, CURSO_CONCESIONARIO_ATTR_COCHE,
+					   c1);
+
+	curso_concesionario_snprintf(info, sizeof(info), con);
+	printf("%s", info);
+
+	curso_concesionario_free(con);
+	return 0;
+}
diff --git a/ejercicios/2/valgrind/valgrind.log b/ejercicios/2/valgrind/valgrind.log
new file mode 100644
index 0000000..a48e212
--- /dev/null
+++ b/ejercicios/2/valgrind/valgrind.log
@@ -0,0 +1,21 @@
+==23409== Memcheck, a memory error detector
+==23409== Copyright (C) 2002-2013, and GNU GPL'd, by Julian Seward et al.
+==23409== Using Valgrind-3.10.0.SVN and LibVEX; rerun with -h for copyright info
+==23409== Command: ./ej2 -m sfd -i 4 -g sf -d sf
+==23409== 
+Matrícula: sfd 
+ID: 4 
+Gama: sf 
+Dueño: sf 
+Recomendamos el uso de -m/-matricula,-i/-id, -g/-gama, -d/-dueno 
+el concesionario propiedad de sf, tiene 1 y son:
+matricula sfd marca sf id 4
+==23409== 
+==23409== HEAP SUMMARY:
+==23409==     in use at exit: 0 bytes in 0 blocks
+==23409==   total heap usage: 5 allocs, 5 frees, 90 bytes allocated
+==23409== 
+==23409== All heap blocks were freed -- no leaks are possible
+==23409== 
+==23409== For counts of detected and suppressed errors, rerun with: -v
+==23409== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
-- 
1.9.1

