From 06d3a6fbc7d7817ddb58d04913af021029c8e717 Mon Sep 17 00:00:00 2001
From: JaviBF92 <jafibf_92@hotmail.com>
Date: Sat, 18 Apr 2015 19:41:04 +0200
Subject: [PATCH] =?UTF-8?q?Aplicaci=C3=B3n=20GTK=20de=20gesti=C3=B3n=20de?=
 =?UTF-8?q?=20concesionario.=20Queda=20por=20incluir=20la=20eliminaci?=
 =?UTF-8?q?=C3=B3n=20de=20veh=C3=ADculos=20y=20la=20construcci=C3=B3n=20de?=
 =?UTF-8?q?l=20proyecto=20con=20autoconf=20y=20automake?=
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

Signed-off-by: JaviBF92 <jafibf_92@hotmail.com>
---
 ejercicios/include/coche.h         |  43 +++
 ejercicios/include/concesionario.h |  32 ++
 ejercicios/include/list.h          | 244 ++++++++++++++
 ejercicios/src/coche.c             | 122 +++++++
 ejercicios/src/concesionario.c     | 171 ++++++++++
 ejercicios/src/main.c              | 628 +++++++++++++++++++++++++++++++++++++
 6 files changed, 1240 insertions(+)
 create mode 100644 ejercicios/include/coche.h
 create mode 100644 ejercicios/include/concesionario.h
 create mode 100644 ejercicios/include/list.h
 create mode 100644 ejercicios/src/coche.c
 create mode 100644 ejercicios/src/concesionario.c
 create mode 100644 ejercicios/src/main.c

diff --git a/ejercicios/include/coche.h b/ejercicios/include/coche.h
new file mode 100644
index 0000000..319dd33
--- /dev/null
+++ b/ejercicios/include/coche.h
@@ -0,0 +1,43 @@
+#include <stdio.h>
+#include <stdint.h>
+#include <stdlib.h>
+#include <stdbool.h>
+#include "list.h"
+
+enum {
+	CURSO_COCHE_ATTR_MARCA,
+	CURSO_COCHE_ATTR_MATRICULA,
+	CURSO_COCHE_ATTR_ID,
+	__CURSO_COCHE_ATTR_MAX
+};
+
+#define CURSO_COCHE_ATTR_MAX (__CURSO_COCHE_ATTR_MAX - 1)
+
+#define xfree(ptr)      free((void *)ptr);
+
+struct coche {
+	struct list_head	head;
+	uint32_t		id;
+	const char      	*matricula;
+	const char		*marca;
+
+	uint32_t		flags;
+};
+
+struct coche *curso_coche_alloc(void);
+void curso_coche_free(struct coche *);
+
+bool curso_coche_attr_is_set(const struct coche *c, uint16_t attr);
+
+void curso_coche_attr_unset(struct coche *c, uint16_t attr);
+
+void curso_coche_attr_set_data(struct coche *c, uint16_t attr, const void *data,
+			       uint32_t data_len);
+void curso_coche_attr_set_u32(struct coche *c, uint16_t attr, uint32_t data);
+void curso_coche_attr_set_str(struct coche *c, uint16_t attr, const char *data);
+
+const void *curso_coche_attr_get_data(struct coche *c, uint16_t attr);
+uint32_t curso_coche_attr_get_u32(struct coche *c, uint16_t attr);
+const char *curso_coche_attr_get_str(struct coche *c, uint16_t attr);
+
+int curso_coche_snprintf(char *buf, size_t size, struct coche *c);
diff --git a/ejercicios/include/concesionario.h b/ejercicios/include/concesionario.h
new file mode 100644
index 0000000..b3ae212
--- /dev/null
+++ b/ejercicios/include/concesionario.h
@@ -0,0 +1,32 @@
+#include "coche.h"
+
+enum {
+	CURSO_CONCESIONARIO_ATTR_COCHE,
+	CURSO_CONCESIONARIO_ATTR_DUENO,
+	CURSO_CONCESIONARIO_ATTR_NUM_COCHES,
+	__CURSO_CONCESIONARIO_ATTR_MAX
+};
+
+#define CURSO_CONCESIONARIO_ATTR_MAX (__CURSO_CONCESIONARIO_ATTR_MAX - 1)
+
+struct concesionario;
+
+struct concesionario *curso_concesionario_alloc(void);
+void curso_concesionario_free(struct concesionario *);
+
+void curso_concesionario_attr_unset_coche(struct concesionario *con,
+					  uint32_t pos);
+
+void curso_concesionario_attr_set_str(struct concesionario *con, uint16_t attr,
+				      const char *data);
+void curso_concesionario_attr_set_coche(struct concesionario *con,
+					uint16_t attr, struct coche *c);
+
+uint32_t curso_concesionario_attr_get_u32(struct concesionario *con,
+					  uint16_t attr);
+const char *curso_concesionario_attr_get_str(struct concesionario *con,
+					     uint16_t attr);
+struct coche *curso_concesionario_attr_get_coche(struct concesionario *con,
+						 uint16_t attr, uint32_t pos);
+
+int curso_concesionario_snprintf(char *buf, size_t size, struct concesionario *c);
diff --git a/ejercicios/include/list.h b/ejercicios/include/list.h
new file mode 100644
index 0000000..3a76885
--- /dev/null
+++ b/ejercicios/include/list.h
@@ -0,0 +1,244 @@
+#ifndef __LIST_H
+#define __LIST_H
+
+/* This file is from Linux Kernel (include/linux/list.h) 
+ * and modified by simply removing hardware prefetching of list items. 
+ * Here by copyright, credits attributed to wherever they belong.
+ * Kulesh Shanmugasundaram (kulesh [squiggly] isis.poly.edu)
+ */
+
+/*
+ * Simple doubly linked list implementation.
+ *
+ * Some of the internal functions ("__xxx") are useful when
+ * manipulating whole lists rather than single entries, as
+ * sometimes we already know the next/prev entries and we can
+ * generate better code by using them directly rather than
+ * using the generic single-entry routines.
+ */
+
+struct list_head {
+	struct list_head *next, *prev;
+};
+
+#define LIST_HEAD_INIT(name) { &(name), &(name) }
+
+#define LIST_HEAD(name) \
+	struct list_head name = LIST_HEAD_INIT(name)
+
+#define INIT_LIST_HEAD(ptr) do { \
+	(ptr)->next = (ptr); (ptr)->prev = (ptr); \
+} while (0)
+
+/*
+ * Insert a new entry between two known consecutive entries. 
+ *
+ * This is only for internal list manipulation where we know
+ * the prev/next entries already!
+ */
+static inline void __list_add(struct list_head *new,
+			      struct list_head *prev,
+			      struct list_head *next)
+{
+	next->prev = new;
+	new->next = next;
+	new->prev = prev;
+	prev->next = new;
+}
+
+/**
+ * list_add - add a new entry
+ * @new: new entry to be added
+ * @head: list head to add it after
+ *
+ * Insert a new entry after the specified head.
+ * This is good for implementing stacks.
+ */
+static inline void list_add(struct list_head *new, struct list_head *head)
+{
+	__list_add(new, head, head->next);
+}
+
+/**
+ * list_add_tail - add a new entry
+ * @new: new entry to be added
+ * @head: list head to add it before
+ *
+ * Insert a new entry before the specified head.
+ * This is useful for implementing queues.
+ */
+static inline void list_add_tail(struct list_head *new, struct list_head *head)
+{
+	__list_add(new, head->prev, head);
+}
+
+/*
+ * Delete a list entry by making the prev/next entries
+ * point to each other.
+ *
+ * This is only for internal list manipulation where we know
+ * the prev/next entries already!
+ */
+static inline void __list_del(struct list_head *prev, struct list_head *next)
+{
+	next->prev = prev;
+	prev->next = next;
+}
+
+/**
+ * list_del - deletes entry from list.
+ * @entry: the element to delete from the list.
+ * Note: list_empty on entry does not return true after this, the entry is in an undefined state.
+ */
+static inline void list_del(struct list_head *entry)
+{
+	__list_del(entry->prev, entry->next);
+	entry->next = (void *) 0;
+	entry->prev = (void *) 0;
+}
+
+/**
+ * list_del_init - deletes entry from list and reinitialize it.
+ * @entry: the element to delete from the list.
+ */
+static inline void list_del_init(struct list_head *entry)
+{
+	__list_del(entry->prev, entry->next);
+	INIT_LIST_HEAD(entry); 
+}
+
+/**
+ * list_move - delete from one list and add as another's head
+ * @list: the entry to move
+ * @head: the head that will precede our entry
+ */
+static inline void list_move(struct list_head *list, struct list_head *head)
+{
+        __list_del(list->prev, list->next);
+        list_add(list, head);
+}
+
+/**
+ * list_move_tail - delete from one list and add as another's tail
+ * @list: the entry to move
+ * @head: the head that will follow our entry
+ */
+static inline void list_move_tail(struct list_head *list,
+				  struct list_head *head)
+{
+        __list_del(list->prev, list->next);
+        list_add_tail(list, head);
+}
+
+/**
+ * list_empty - tests whether a list is empty
+ * @head: the list to test.
+ */
+static inline int list_empty(struct list_head *head)
+{
+	return head->next == head;
+}
+
+static inline void __list_splice(struct list_head *list,
+				 struct list_head *head)
+{
+	struct list_head *first = list->next;
+	struct list_head *last = list->prev;
+	struct list_head *at = head->next;
+
+	first->prev = head;
+	head->next = first;
+
+	last->next = at;
+	at->prev = last;
+}
+
+/**
+ * list_splice - join two lists
+ * @list: the new list to add.
+ * @head: the place to add it in the first list.
+ */
+static inline void list_splice(struct list_head *list, struct list_head *head)
+{
+	if (!list_empty(list))
+		__list_splice(list, head);
+}
+
+/**
+ * list_splice_init - join two lists and reinitialise the emptied list.
+ * @list: the new list to add.
+ * @head: the place to add it in the first list.
+ *
+ * The list at @list is reinitialised
+ */
+static inline void list_splice_init(struct list_head *list,
+				    struct list_head *head)
+{
+	if (!list_empty(list)) {
+		__list_splice(list, head);
+		INIT_LIST_HEAD(list);
+	}
+}
+
+/**
+ * list_entry - get the struct for this entry
+ * @ptr:	the &struct list_head pointer.
+ * @type:	the type of the struct this is embedded in.
+ * @member:	the name of the list_struct within the struct.
+ */
+#define list_entry(ptr, type, member) \
+	((type *)((char *)(ptr)-(unsigned long)(&((type *)0)->member)))
+
+/**
+ * list_for_each	-	iterate over a list
+ * @pos:	the &struct list_head to use as a loop counter.
+ * @head:	the head for your list.
+ */
+#define list_for_each(pos, head) \
+	for (pos = (head)->next; pos != (head); \
+        	pos = pos->next)
+/**
+ * list_for_each_prev	-	iterate over a list backwards
+ * @pos:	the &struct list_head to use as a loop counter.
+ * @head:	the head for your list.
+ */
+#define list_for_each_prev(pos, head) \
+	for (pos = (head)->prev; pos != (head); \
+        	pos = pos->prev)
+        	
+/**
+ * list_for_each_safe	-	iterate over a list safe against removal of list entry
+ * @pos:	the &struct list_head to use as a loop counter.
+ * @n:		another &struct list_head to use as temporary storage
+ * @head:	the head for your list.
+ */
+#define list_for_each_safe(pos, n, head) \
+	for (pos = (head)->next, n = pos->next; pos != (head); \
+		pos = n, n = pos->next)
+
+/**
+ * list_for_each_entry	-	iterate over list of given type
+ * @pos:	the type * to use as a loop counter.
+ * @head:	the head for your list.
+ * @member:	the name of the list_struct within the struct.
+ */
+#define list_for_each_entry(pos, head, member)				\
+	for (pos = list_entry((head)->next, typeof(*pos), member);	\
+	     &pos->member != (head); 					\
+	     pos = list_entry(pos->member.next, typeof(*pos), member))
+
+/**
+ * list_for_each_entry_safe - iterate over list of given type safe against removal of list entry
+ * @pos:	the type * to use as a loop counter.
+ * @n:		another type * to use as temporary storage
+ * @head:	the head for your list.
+ * @member:	the name of the list_struct within the struct.
+ */
+#define list_for_each_entry_safe(pos, n, head, member)			\
+	for (pos = list_entry((head)->next, typeof(*pos), member),	\
+		n = list_entry(pos->member.next, typeof(*pos), member);	\
+	     &pos->member != (head); 					\
+	     pos = n, n = list_entry(n->member.next, typeof(*n), member))
+
+
+#endif
diff --git a/ejercicios/src/coche.c b/ejercicios/src/coche.c
new file mode 100644
index 0000000..a5a314a
--- /dev/null
+++ b/ejercicios/src/coche.c
@@ -0,0 +1,122 @@
+#include "../include/coche.h"
+#include <string.h>
+
+struct coche *curso_coche_alloc(void)
+{
+	struct coche *c =  (struct coche *)malloc(sizeof(struct coche));
+	memset(c, 0, (sizeof(struct coche)));
+	return c;
+}
+
+void curso_coche_free(struct coche *c)
+{
+	if (c->flags & (1 << CURSO_COCHE_ATTR_MARCA))
+		xfree(c->marca);
+
+	if (c->flags & (1 << CURSO_COCHE_ATTR_MATRICULA))
+		xfree(c->matricula);
+
+	xfree(c);
+}
+
+bool curso_coche_attr_is_set(const struct coche *c, uint16_t attr)
+{
+	return c->flags & (1 << attr);
+}
+
+void curso_coche_attr_unset(struct coche *c, uint16_t attr)
+{
+	if (!(c->flags & (1 << attr)))
+		return;
+
+	switch (attr) {
+	case CURSO_COCHE_ATTR_MARCA:
+		if (c->marca) {
+			xfree(c->marca);
+			c->marca = NULL;
+		}
+		break;
+	case CURSO_COCHE_ATTR_MATRICULA:
+		if (c->matricula) {
+			xfree(c->matricula);
+			c->matricula = NULL;
+		}
+		break;
+	case CURSO_COCHE_ATTR_ID:
+		break;
+	}
+
+	c->flags &= ~(1 << attr);
+}
+
+void curso_coche_set_data(struct coche *c, uint16_t attr, const void *data,
+			  uint32_t data_len)
+{
+	if (attr > CURSO_COCHE_ATTR_MAX)
+		return;
+
+	switch (attr) {
+	case CURSO_COCHE_ATTR_MARCA:
+		if (c->marca)
+			xfree(c->marca);
+
+		c->marca = strdup(data);
+		break;
+	case CURSO_COCHE_ATTR_MATRICULA:
+		if (c->matricula)
+			xfree(c->matricula);
+
+		c->matricula = strdup(data);
+		break;
+	case CURSO_COCHE_ATTR_ID:
+		c->id = *((uint32_t *)data);
+		break;
+	}
+
+	c->flags |= (1 << attr);
+}
+
+void curso_coche_attr_set_u32(struct coche *c, uint16_t attr, uint32_t data)
+{
+	curso_coche_set_data(c, attr, &data, sizeof(uint32_t));
+}
+
+void curso_coche_attr_set_str(struct coche *c, uint16_t attr, const char *data)
+{
+	curso_coche_set_data(c, attr, data, 0);
+}
+
+const void *curso_coche_attr_get_data(struct coche *c, uint16_t attr)
+{
+	if (!(c->flags & (1 << attr)))
+		return NULL;
+
+	switch(attr) {
+	case CURSO_COCHE_ATTR_MARCA:
+		return c->marca;
+	case CURSO_COCHE_ATTR_MATRICULA:
+		return c->matricula;
+	case CURSO_COCHE_ATTR_ID:
+		return &c->id;
+	}
+	return NULL;
+}
+
+uint32_t curso_coche_attr_get_u32(struct coche *c, uint16_t attr)
+{
+	const void *ret = curso_coche_attr_get_data(c, attr);
+	return ret == NULL ? 0 : *((uint32_t *)ret);
+}
+
+const char *curso_coche_attr_get_str(struct coche *c, uint16_t attr)
+{
+	return curso_coche_attr_get_data(c, attr);
+}
+
+int curso_coche_snprintf(char *buf, size_t size, struct coche *c)
+{
+	return snprintf(buf, size, "matricula %s marca %s id %d",
+			curso_coche_attr_get_str(c, CURSO_COCHE_ATTR_MATRICULA), 
+			curso_coche_attr_get_str(c, CURSO_COCHE_ATTR_MARCA), 
+			curso_coche_attr_get_u32(c, CURSO_COCHE_ATTR_ID));
+}
diff --git a/ejercicios/src/concesionario.c b/ejercicios/src/concesionario.c
new file mode 100644
index 0000000..3a2cbd8
--- /dev/null
+++ b/ejercicios/src/concesionario.c
@@ -0,0 +1,171 @@
+#include "../include/concesionario.h"
+#include <string.h>
+
+struct concesionario {
+	struct list_head	garaje;
+	const char      	*dueno;
+	uint32_t		num_coches;
+
+	uint32_t		flags;
+};
+
+struct concesionario *curso_concesionario_alloc(void)
+{
+	struct concesionario *con;
+
+	con = malloc(sizeof(struct concesionario));
+	if (con ==  NULL)
+		return NULL;
+
+	memset(con, 0, (sizeof(struct concesionario)));
+	
+	INIT_LIST_HEAD(&con->garaje);
+	
+	con->flags |= (1 << CURSO_CONCESIONARIO_ATTR_NUM_COCHES);
+
+	return con;
+}
+
+void curso_concesionario_free(struct concesionario *con)
+{
+	int i;
+	struct coche *c, *tmp;
+
+	if (con->flags & (1 << CURSO_CONCESIONARIO_ATTR_DUENO))
+		xfree(con->dueno);
+
+	list_for_each_entry_safe(c, tmp, &con->garaje, head) {
+		list_del(&c->head);
+		curso_coche_free(c);
+	}
+
+	xfree(con);
+}
+
+void curso_concesionario_attr_unset_coche(struct concesionario *con,
+					  uint32_t pos)
+{
+	int i = 0;
+	struct coche *c, *tmp;
+
+	if (pos < 0 || pos > con->num_coches)
+		return;
+
+	list_for_each_entry_safe(c, tmp, &con->garaje, head) {
+		if (i == pos) {
+			list_del(&c->head);
+			curso_coche_free(c);
+			break;
+		}
+
+		i++;
+	}
+
+	con->num_coches--;
+}
+
+static void curso_concesionario_set_data(struct concesionario *con,
+					 uint16_t attr, const void *data)
+{
+	struct coche *c;
+
+	if (attr > CURSO_CONCESIONARIO_ATTR_MAX)
+		return;
+
+	switch (attr) {
+	case CURSO_CONCESIONARIO_ATTR_DUENO:
+		if (con->dueno)
+			xfree(con->dueno);
+
+		con->dueno = strdup(data);
+		break;
+	case CURSO_CONCESIONARIO_ATTR_COCHE:
+		if (con->num_coches > 50) {
+			printf("El garaje esta lleno\n");
+			break;
+		}
+		c = (struct coche *)data;
+		list_add(&c->head, &con->garaje);
+		con->num_coches++;
+		break;
+	}
+
+	con->flags |= (1 << attr);
+}
+
+void curso_concesionario_attr_set_str(struct concesionario *con,
+					uint16_t attr, const char *data)
+{
+	curso_concesionario_set_data(con, attr, data);
+}
+
+void curso_concesionario_attr_set_coche(struct concesionario *con,
+					  uint16_t attr, struct coche *data)
+{
+	curso_concesionario_set_data(con, attr, data);
+}
+
+const void *curso_concesionario_attr_get_data(struct concesionario *con,
+					      uint16_t attr, uint32_t pos)
+{
+	int i = 0;
+	struct coche *c;
+
+	if (!(con->flags & (1 << attr)))
+		return NULL;
+
+	switch(attr) {
+	case CURSO_CONCESIONARIO_ATTR_DUENO:
+		return con->dueno;
+	case CURSO_CONCESIONARIO_ATTR_NUM_COCHES:
+		return &con->num_coches;
+	case CURSO_CONCESIONARIO_ATTR_COCHE:
+		list_for_each_entry(c, &con->garaje, head) {
+			if (i == pos)
+				break;
+
+			i++;
+		}
+
+		return c;
+	}
+	return NULL;
+}
+
+uint32_t curso_concesionario_attr_get_u32(struct concesionario *con,
+					  uint16_t attr)
+{
+	const void *ret = curso_concesionario_attr_get_data(con, attr, 0);
+	return ret == NULL ? 0 : *((uint32_t *)ret);
+}
+
+const char *curso_concesionario_attr_get_str(struct concesionario *con,
+					     uint16_t attr)
+{
+	return curso_concesionario_attr_get_data(con, attr, 0);
+}
+
+struct coche *curso_concesionario_attr_get_coche(struct concesionario *con,
+					         uint16_t attr, uint32_t pos)
+{
+	return (struct coche *)curso_concesionario_attr_get_data(con, attr,
+								 pos);
+}
+
+int curso_concesionario_snprintf(char *buf, size_t size,
+				 struct concesionario *con)
+{
+	int ret = 0;
+	struct coche *c;
+
+	ret += snprintf(buf, size,
+			"el concesionario propiedad de %s, tiene %d y son:\n",
+			con->dueno, con->num_coches);
+
+	list_for_each_entry(c, &con->garaje, head) {
+		ret += curso_coche_snprintf(buf + ret, size - ret, c);
+		ret += snprintf(buf + ret, size - ret, "\n");
+	}
+
+	return ret;
+}
diff --git a/ejercicios/src/main.c b/ejercicios/src/main.c
new file mode 100644
index 0000000..650661a
--- /dev/null
+++ b/ejercicios/src/main.c
@@ -0,0 +1,628 @@
+#include "../include/concesionario.h"
+#include <gtk/gtk.h>
+
+struct concesionario *con;
+int creado;
+int coches;
+
+void nueva_ventana(void);
+void atras(GtkWidget *ventana);
+void nueva_ventana_crear(GtkWidget *ventana);
+void nueva_ventana_modificar(GtkWidget *ventana);
+void nueva_ventana_eliminar(GtkWidget *ventana);
+void nombra_concesionario(GtkButton *widget, gpointer data);
+void ventanaElimina(GtkWidget *ventana);
+void elimina_concesionario(GtkWidget *ventana);
+void crea_coche(GtkButton *widget, gpointer data);
+void modifica_coche(GtkButton *widget, gpointer data);
+
+
+int main(int argc, char *argv[])
+{
+	
+	
+	gtk_init(&argc, &argv);
+	
+	con = curso_concesionario_alloc();
+	
+	if(con == NULL){
+		printf("El concesionario no se ha creado correctamente");
+		return -1;
+	}
+	
+	creado = 0;
+	coches = 0;
+	
+	nueva_ventana();
+	
+	gtk_main();
+	
+	return 0;
+}
+
+void nueva_ventana(){
+	
+	GtkWidget *ventana;
+	GtkWidget *botonCrear;
+	GtkWidget *botonModificar;
+	GtkWidget *botonEliminar;
+	GtkWidget *botonSalir;
+	GtkWidget *etiqueta;
+	GtkWidget *conjVert;
+	GtkWidget *conjHoriz1;
+	GtkWidget *conjHoriz2;
+
+	ventana = gtk_window_new(GTK_WINDOW_TOPLEVEL);
+	gtk_window_set_title((GtkWindow *)ventana, "Administrador de "\
+			     "concesionario");
+	
+	botonCrear = gtk_button_new_with_label("Crear");
+	botonModificar = gtk_button_new_with_label("Modificar");
+	botonEliminar = gtk_button_new_with_label("Eliminar");
+	botonSalir = gtk_button_new_with_label("Salir");
+	
+	etiqueta = gtk_label_new("Bienvenido a la herramienta de gestión del"\
+				  " concesionario");
+	
+	conjVert = gtk_vbox_new(FALSE, 8);
+	conjHoriz1 = gtk_hbox_new(FALSE, 8);
+	conjHoriz2 = gtk_hbox_new(FALSE, 8);
+	
+	gtk_box_pack_start((GtkBox *)conjVert, etiqueta, FALSE, FALSE, 4);
+	gtk_box_pack_start((GtkBox *)conjVert, conjHoriz1, FALSE, FALSE, 4);
+	gtk_box_pack_start((GtkBox *)conjHoriz1, botonCrear, FALSE, FALSE, 32);
+	gtk_box_pack_start((GtkBox *)conjHoriz1, botonModificar, FALSE, FALSE, 32);
+	gtk_box_pack_start((GtkBox *)conjHoriz1, botonEliminar, FALSE, FALSE, 32);
+	gtk_box_pack_start((GtkBox *)conjVert, conjHoriz2, FALSE, FALSE, 32);
+	gtk_box_pack_start((GtkBox *)conjHoriz2, botonSalir, FALSE, FALSE, 32);
+
+	gtk_container_add((GtkContainer *)ventana, conjVert);
+	
+	g_signal_connect_swapped((GObject *)botonCrear, "clicked", (GCallback) nueva_ventana_crear, ventana);
+
+	g_signal_connect_swapped((GObject *)botonModificar, "clicked", (GCallback) nueva_ventana_modificar, ventana);
+	
+	g_signal_connect_swapped((GObject *)botonEliminar, "clicked", (GCallback) nueva_ventana_eliminar, ventana);
+	
+	g_signal_connect_swapped((GObject *)botonSalir, "clicked", (GCallback) gtk_main_quit, NULL);
+	
+	
+	
+	gtk_widget_show_all(ventana);
+}
+
+void atras(GtkWidget *ventana){
+	
+	gtk_widget_destroy((GtkWidget *)ventana);
+	
+	nueva_ventana();
+	
+	
+}
+
+void nueva_ventana_crear(GtkWidget *ventana){
+	
+	GtkWidget *window;
+	
+	GtkWidget *etiq_conc;
+	GtkWidget *etiq_coch;
+	GtkWidget *etiq_dueno;
+	GtkWidget *etiq_matricula;
+	GtkWidget *etiq_marca;
+	GtkWidget *etiq_id;
+	GtkWidget *mensaje;
+	
+	GtkWidget *entr_dueno;
+	GtkWidget *entr_id;
+	GtkWidget *entr_matricula;
+	GtkWidget *entr_marca;
+	
+	GtkWidget *conjVertL1;
+	GtkWidget *conjHorL2a;
+	GtkWidget *conjHorL2b;
+	GtkWidget *conjHorL2c;
+	GtkWidget *conjHorL2d;
+	GtkWidget *conjHorL2e;
+
+	
+	GtkWidget *boton_crear_conc;
+	GtkWidget *boton_crear_coche;
+	GtkWidget *boton_salir;
+	
+	struct coche *c1;
+	const gchar *compruebaid;
+	
+	GObject **obj;
+	
+	gtk_widget_destroy((GtkWidget *)ventana);
+	
+	window = gtk_window_new(GTK_WINDOW_TOPLEVEL);
+	gtk_window_set_title((GtkWindow *)window, "Crear");
+	
+	etiq_conc = gtk_label_new("Concesionario");
+	etiq_coch = gtk_label_new("Coche");
+	etiq_dueno = gtk_label_new("Dueño:");
+	etiq_matricula = gtk_label_new("Matrícula:");
+	etiq_marca = gtk_label_new("Marca:");
+	etiq_id = gtk_label_new("ID:");
+	mensaje = gtk_label_new("Ya hay uno creado");
+	
+	boton_crear_conc = gtk_button_new_with_label("Crear");
+	boton_crear_coche = gtk_button_new_with_label("Crear");
+	boton_salir = gtk_button_new_with_label("Atrás");
+	
+	conjVertL1 = gtk_vbox_new(TRUE, 8);
+	conjHorL2a = gtk_hbox_new(FALSE, 520);
+	conjHorL2b = gtk_hbox_new(FALSE, 8);
+	conjHorL2c = gtk_hbox_new(FALSE, 570);
+	conjHorL2d = gtk_hbox_new(FALSE,8);
+	conjHorL2e = gtk_hbox_new(FALSE,8);
+	
+	entr_dueno = gtk_entry_new();
+	entr_matricula = gtk_entry_new();
+	entr_marca = gtk_entry_new();
+	entr_id = gtk_entry_new();
+	
+	obj = calloc(1,5 * sizeof(GObject));
+	
+	obj[0] = (GObject *) window;
+	obj[1] = (GObject *) entr_dueno;
+	obj[2] = (GObject *) entr_id;
+	obj[3] = (GObject *) entr_matricula;
+	obj[4] = (GObject *) entr_marca;
+	
+	gtk_box_pack_start((GtkBox *)conjVertL1, conjHorL2a, FALSE, FALSE, 4);
+	gtk_box_pack_start((GtkBox *)conjVertL1, conjHorL2b, FALSE, FALSE, 4);
+	gtk_box_pack_start((GtkBox *)conjVertL1, conjHorL2c, FALSE, FALSE, 4);
+	gtk_box_pack_start((GtkBox *)conjVertL1, conjHorL2d, FALSE, FALSE, 4);
+	gtk_box_pack_start((GtkBox *)conjVertL1, conjHorL2e, FALSE, FALSE, 4);
+
+	gtk_box_pack_start((GtkBox *)conjHorL2a, etiq_conc, FALSE, FALSE, 4);	
+	
+	if(creado == 1){
+		gtk_box_pack_start((GtkBox *)conjHorL2b, mensaje, FALSE, FALSE, 4);	
+	}else{
+		gtk_box_pack_start((GtkBox *)conjHorL2a, boton_crear_conc, FALSE, FALSE, 4);
+		gtk_box_pack_start((GtkBox *)conjHorL2b, etiq_dueno, FALSE, FALSE, 4);
+		gtk_box_pack_start((GtkBox *)conjHorL2b, entr_dueno, FALSE, FALSE, 0);
+	}
+
+	
+	gtk_box_pack_start((GtkBox *)conjHorL2c, etiq_coch, FALSE, FALSE, 4);
+	gtk_box_pack_start((GtkBox *)conjHorL2c, boton_crear_coche, FALSE, FALSE, 4);
+	
+	gtk_box_pack_start((GtkBox *)conjHorL2d, etiq_id, FALSE, FALSE, 4);
+	gtk_box_pack_start((GtkBox *)conjHorL2d, entr_id, FALSE, FALSE, 4);
+	gtk_box_pack_start((GtkBox *)conjHorL2d, etiq_matricula, FALSE, FALSE, 4);
+	gtk_box_pack_start((GtkBox *)conjHorL2d, entr_matricula, FALSE, FALSE, 4);
+	gtk_box_pack_start((GtkBox *)conjHorL2d, etiq_marca, FALSE, FALSE, 4);
+	gtk_box_pack_start((GtkBox *)conjHorL2d, entr_marca, FALSE, FALSE, 4);
+
+	gtk_box_pack_start((GtkBox *)conjHorL2e, boton_salir, FALSE, FALSE, 4);
+	
+	gtk_container_add((GtkContainer *)window, conjVertL1);
+	
+	g_signal_connect_swapped((GObject *)boton_salir, "clicked", (GCallback) atras, window);
+		
+	g_signal_connect((GObject *)boton_crear_conc, "clicked", (GCallback) nombra_concesionario, (gpointer) obj);
+	
+	g_signal_connect((GObject *)boton_crear_coche, "clicked", (GCallback) crea_coche, (gpointer) obj);
+	
+	
+	gtk_widget_show_all(window);
+
+}
+
+void nueva_ventana_modificar(GtkWidget *ventana){
+	
+	GtkWidget *window;
+	
+	GtkWidget *etiq_conc;
+	GtkWidget *etiq_coch;
+	GtkWidget *etiq_dueno;
+	GtkWidget *etiq_matricula;
+	GtkWidget *etiq_marca;
+	GtkWidget *mensaje_coche;
+	GtkWidget *mensaje_concesionario;
+	GtkWidget *entr_dueno;
+	GtkWidget *entr_matricula;
+	GtkWidget *entr_marca;
+	
+	GtkWidget *conjVertL1;
+	GtkWidget *conjHorL2a;
+	GtkWidget *conjHorL2b;
+	GtkWidget *conjHorL2c;
+	GtkWidget *conjHorL2ca;
+	GtkWidget *conjHorL2d;
+	GtkWidget *conjHorL2e;
+	
+	GtkWidget *combo;
+	
+	GtkWidget *boton_modif_conc;
+	GtkWidget *boton_modif_coche;
+	GtkWidget *boton_salir;
+	
+	GObject **obj;
+	
+	struct coche *c1;
+
+	int i;
+
+	int id;
+	char *idchar;
+	
+	gtk_widget_destroy((GtkWidget *)ventana);
+	
+	window = gtk_window_new(GTK_WINDOW_TOPLEVEL);
+	gtk_window_set_title((GtkWindow *)window, "Modificar");
+	
+	etiq_conc = gtk_label_new("Concesionario");
+	
+	etiq_coch = gtk_label_new("Coche");
+	etiq_dueno = gtk_label_new("Dueño:");
+	etiq_matricula = gtk_label_new("Matrícula:");
+	etiq_marca = gtk_label_new("Marca:");
+	mensaje_coche = gtk_label_new("No hay coches creados");
+	mensaje_concesionario = gtk_label_new("No se ha creado el concesionario");
+	
+	boton_modif_conc = gtk_button_new_with_label("Modificar");
+	boton_modif_coche = gtk_button_new_with_label("Modificar");
+	boton_salir = gtk_button_new_with_label("Atrás");
+	
+	conjVertL1 = gtk_vbox_new(TRUE, 8);
+	conjHorL2a = gtk_hbox_new(FALSE, 350);
+	conjHorL2b = gtk_hbox_new(FALSE, 8);
+	conjHorL2c = gtk_hbox_new(FALSE, 155);
+	conjHorL2ca = gtk_hbox_new(FALSE, 8);
+	conjHorL2d = gtk_hbox_new(FALSE,8);
+	conjHorL2e = gtk_hbox_new(FALSE,8);
+	
+	entr_dueno = gtk_entry_new();
+	entr_matricula = gtk_entry_new();
+	entr_marca = gtk_entry_new();
+
+	combo= gtk_combo_box_text_new();
+	
+	obj = calloc(1,2 * sizeof(GObject));
+	
+	obj[0] = (GObject *) window;
+	obj[1] = (GObject *) entr_dueno;
+	obj[2] = (GObject *) combo;
+	obj[3] = (GObject *) entr_matricula;
+	obj[4] = (GObject *) entr_marca;
+	
+	c1 = curso_coche_alloc();
+	
+	gtk_box_pack_start((GtkBox *)conjVertL1, conjHorL2a, FALSE, FALSE, 4);
+	gtk_box_pack_start((GtkBox *)conjVertL1, conjHorL2b, FALSE, FALSE, 4);
+	gtk_box_pack_start((GtkBox *)conjVertL1, conjHorL2c, FALSE, FALSE, 4);
+	gtk_box_pack_start((GtkBox *)conjVertL1, conjHorL2d, FALSE, FALSE, 4);
+	gtk_box_pack_start((GtkBox *)conjVertL1, conjHorL2e, FALSE, FALSE, 4);
+
+	gtk_box_pack_start((GtkBox *)conjHorL2a, etiq_conc, FALSE, FALSE, 4);	
+	
+	
+	if(creado == 0){
+		
+		gtk_box_pack_start((GtkBox *)conjHorL2b, mensaje_concesionario, FALSE, FALSE, 4);
+		
+	}else{
+		
+		gtk_entry_set_text((GtkEntry *)entr_dueno, curso_concesionario_attr_get_str(con,CURSO_CONCESIONARIO_ATTR_DUENO)); 
+		
+		gtk_box_pack_start((GtkBox *)conjHorL2a, boton_modif_conc, FALSE, FALSE, 4);
+		
+		gtk_box_pack_start((GtkBox *)conjHorL2b, etiq_dueno, FALSE, FALSE, 4);
+		gtk_box_pack_start((GtkBox *)conjHorL2b, entr_dueno, FALSE, FALSE, 20);
+	}
+	
+	gtk_box_pack_start((GtkBox *)conjHorL2c, conjHorL2ca, FALSE, FALSE, 4);
+	gtk_box_pack_start((GtkBox *)conjHorL2ca, etiq_coch, FALSE, FALSE, 4);
+	
+	if(coches ==0){
+	
+		gtk_box_pack_start((GtkBox *)conjHorL2d, mensaje_coche, FALSE, FALSE, 4);
+		
+	}else{
+	
+		for(i = 0; i < coches; i++){
+			
+			idchar = malloc(4);
+			c1 = curso_concesionario_attr_get_coche(con, CURSO_CONCESIONARIO_ATTR_COCHE, i);
+			id = curso_coche_attr_get_u32(c1, CURSO_COCHE_ATTR_ID);
+			snprintf(idchar, 4,"%d", id);
+			
+			gtk_combo_box_text_append_text((GtkComboBoxText *)combo, idchar);
+			
+		}
+		
+		gtk_box_pack_start((GtkBox *)conjHorL2ca, combo, FALSE, FALSE, 24);
+		gtk_box_pack_start((GtkBox *)conjHorL2c, boton_modif_coche, FALSE, FALSE, 4);
+	
+		gtk_box_pack_start((GtkBox *)conjHorL2d, etiq_matricula, FALSE, FALSE, 4);
+		gtk_box_pack_start((GtkBox *)conjHorL2d, entr_matricula, FALSE, FALSE, 4);
+		gtk_box_pack_start((GtkBox *)conjHorL2d, etiq_marca, FALSE, FALSE, 4);
+		gtk_box_pack_start((GtkBox *)conjHorL2d, entr_marca, FALSE, FALSE, 4);
+		
+	}
+
+	gtk_box_pack_start((GtkBox *)conjHorL2e, boton_salir, FALSE, FALSE, 4);
+	
+	gtk_container_add((GtkContainer *)window, conjVertL1);
+	
+	g_signal_connect_swapped((GObject *)boton_salir, "clicked", (GCallback) atras, window);
+	
+	g_signal_connect((GObject *)boton_modif_conc, "clicked", (GCallback) nombra_concesionario, obj);
+	
+	g_signal_connect((GObject *)boton_modif_coche, "clicked", (GCallback) modifica_coche, obj);
+	
+	gtk_widget_show_all(window);
+	
+}
+
+void nueva_ventana_eliminar(GtkWidget *ventana){
+	
+	GtkWidget *window;
+	
+	GtkWidget *etiq_conc;
+	GtkWidget *etiq_coch;
+	GtkWidget *etiq_nombredueno;
+	GtkWidget *mensaje_coche;
+	GtkWidget *mensaje_concesionario;
+	
+	GtkWidget *conjVertL1;
+	GtkWidget *conjHorL2a;
+	GtkWidget *conjHorL2b;
+	GtkWidget *conjHorL2c;
+	GtkWidget *conjHorL2d;
+	GtkWidget *conjHorL2e;
+
+	GtkWidget *combo;	
+	
+	GtkWidget *boton_elim_conc;
+	GtkWidget *boton_elim_coche;
+	GtkWidget *boton_salir;
+	
+	const char *dueno;
+	
+	gtk_widget_destroy((GtkWidget *)ventana);
+	
+	window = gtk_window_new(GTK_WINDOW_TOPLEVEL);
+	gtk_window_set_title((GtkWindow *)window, "Eliminar");
+	
+	etiq_conc = gtk_label_new("Concesionario");
+	etiq_coch = gtk_label_new("Coche");
+	mensaje_coche = gtk_label_new("No hay coches creados");
+	mensaje_concesionario = gtk_label_new("No se ha creado el concesionario");
+	
+	boton_elim_conc = gtk_button_new_with_label("Eliminar");
+	boton_elim_coche = gtk_button_new_with_label("Eliminar");
+	boton_salir = gtk_button_new_with_label("Atrás");
+	
+	conjVertL1 = gtk_vbox_new(TRUE, 8);
+	conjHorL2a = gtk_hbox_new(FALSE, 256);
+	conjHorL2b = gtk_hbox_new(FALSE, 8);
+	conjHorL2c = gtk_hbox_new(FALSE, 307);
+	conjHorL2d = gtk_hbox_new(FALSE,8);
+	conjHorL2e = gtk_hbox_new(FALSE,8);
+	
+	combo= gtk_combo_new();
+
+	gtk_box_pack_start((GtkBox *)conjVertL1, conjHorL2a, FALSE, FALSE, 4);
+	gtk_box_pack_start((GtkBox *)conjVertL1, conjHorL2b, FALSE, FALSE, 4);
+	gtk_box_pack_start((GtkBox *)conjVertL1, conjHorL2c, FALSE, FALSE, 4);
+	gtk_box_pack_start((GtkBox *)conjVertL1, conjHorL2d, FALSE, FALSE, 4);
+	gtk_box_pack_start((GtkBox *)conjVertL1, conjHorL2e, FALSE, FALSE, 4);
+
+	gtk_box_pack_start((GtkBox *)conjHorL2a, etiq_conc, FALSE, FALSE, 4);	
+	
+	if(creado == 0){
+		
+
+		gtk_box_pack_start((GtkBox *)conjHorL2b, mensaje_concesionario, FALSE, FALSE, 4);
+		
+	}else{
+		
+		dueno = curso_concesionario_attr_get_str(con, CURSO_CONCESIONARIO_ATTR_DUENO);
+		etiq_nombredueno = gtk_label_new(dueno);
+
+		
+		gtk_box_pack_start((GtkBox *)conjHorL2a, boton_elim_conc, FALSE, FALSE, 4);
+
+		gtk_box_pack_start((GtkBox *)conjHorL2b, etiq_nombredueno, FALSE, FALSE, 4);		
+		
+	}
+
+	gtk_box_pack_start((GtkBox *)conjHorL2c, etiq_coch, FALSE, FALSE, 4);
+	
+	if(coches == 0){
+		
+		gtk_box_pack_start((GtkBox *)conjHorL2d, mensaje_coche, FALSE, FALSE, 4);
+		
+	}else{
+			
+		gtk_box_pack_start((GtkBox *)conjHorL2c, boton_elim_coche, FALSE, FALSE, 4);
+	
+		gtk_box_pack_start((GtkBox *)conjHorL2d, combo, FALSE, FALSE, 4);
+
+	}
+	
+	gtk_box_pack_start((GtkBox *)conjHorL2e, boton_salir, FALSE, FALSE, 4);
+	
+	gtk_container_add((GtkContainer *)window, conjVertL1);
+	
+	g_signal_connect_swapped((GObject *)boton_salir, "clicked", (GCallback) atras, window);
+	
+	g_signal_connect_swapped((GObject *)boton_elim_conc, "clicked", (GCallback) ventanaElimina, window);
+	
+	//g_signal_connect((GObject *)boton_elim_coche, "clicked", (GCallback) elimina_coche, window);
+	
+	gtk_widget_show_all(window);
+	
+}
+
+void nombra_concesionario(GtkButton *widget, gpointer data){
+	
+	GObject **obj;
+	const gchar *dueno;
+	GtkWidget *entr_dueno2;
+	
+	obj = (GObject **)data;
+	entr_dueno2 = (GtkWidget *)obj[1];
+	
+	dueno = gtk_entry_get_text((GtkEntry *)entr_dueno2);
+	
+	curso_concesionario_attr_set_str(con, CURSO_CONCESIONARIO_ATTR_DUENO, dueno);
+
+	creado = 1;
+	
+	gtk_widget_destroy((GtkWidget *)obj[0]);
+	nueva_ventana();
+	
+}
+
+void ventanaElimina(GtkWidget *ventana){
+	
+	GtkWidget *window;
+	GtkWidget *etiq;
+	GtkWidget *botonSi;
+	GtkWidget *botonNo;
+	GtkWidget *vbox;
+	
+	gtk_widget_destroy((GtkWidget *)ventana);
+	
+	window = gtk_window_new(GTK_WINDOW_TOPLEVEL);
+	gtk_window_set_title((GtkWindow *)window, "Confirmación");
+	
+	etiq = gtk_label_new("Al eliminar el concesionario \ntambién se eliminarán \ntodos los coches guardados \n¿Estás seguro?");
+	
+	botonSi = gtk_button_new_with_label("Eliminar");
+	botonNo = gtk_button_new_with_label("Atrás");
+	
+	vbox = gtk_vbox_new(false, 8);
+	
+	gtk_box_pack_start((GtkBox *)vbox, etiq, FALSE, FALSE, 4);	
+	gtk_box_pack_start((GtkBox *)vbox, botonSi, FALSE, FALSE, 4);
+	gtk_box_pack_start((GtkBox *)vbox, botonNo, FALSE, FALSE, 4);
+	
+	gtk_container_add((GtkContainer *)window, vbox);
+	
+	g_signal_connect_swapped((GObject *)botonSi, "clicked", (GCallback) elimina_concesionario, window);
+	g_signal_connect_swapped((GObject *)botonNo, "clicked", (GCallback) nueva_ventana_eliminar, window);
+	
+	gtk_widget_show_all(window);
+	
+}
+
+void elimina_concesionario(GtkWidget *ventana){
+	
+	gtk_widget_destroy((GtkWidget *)ventana);
+	
+	curso_concesionario_free(con);
+	
+	con = curso_concesionario_alloc();
+	
+	creado = 0;
+	
+	
+	if(con == NULL){
+		printf("El concesionario no se ha creado correctamente");
+		return ;
+	}
+	
+	nueva_ventana();
+	
+}
+
+void crea_coche(GtkButton *widget, gpointer data){
+	
+	GObject **obj;
+	const gchar *id;
+	const gchar *matr;
+	const gchar *marca;
+	GtkWidget *entr_id2;
+	GtkWidget *entr_matricula2;
+	GtkWidget *entr_marca2;
+	struct coche *c1;
+	
+	c1 = curso_coche_alloc();
+	
+	obj = (GObject **)data;
+	entr_id2 = (GtkWidget *)obj[2];
+	entr_matricula2 = (GtkWidget *)obj[3];
+	entr_marca2 = (GtkWidget *)obj[4];
+	
+	id = gtk_entry_get_text((GtkEntry *)entr_id2);
+	matr = gtk_entry_get_text((GtkEntry *)entr_matricula2);
+	marca = gtk_entry_get_text((GtkEntry *)entr_marca2);
+	
+	curso_coche_attr_set_u32(c1, CURSO_COCHE_ATTR_ID, atoi(id));
+	curso_coche_attr_set_str(c1, CURSO_COCHE_ATTR_MATRICULA, matr);
+	curso_coche_attr_set_str(c1, CURSO_COCHE_ATTR_MARCA, marca);
+	
+	coches++;
+	
+	curso_concesionario_attr_set_coche(con,CURSO_CONCESIONARIO_ATTR_COCHE, c1);
+	
+	gtk_widget_destroy((GtkWidget *)obj[0]);
+	nueva_ventana();
+	
+}
+
+void modifica_coche(GtkButton *widget, gpointer data){
+	
+	GObject **obj;
+	const gchar *id;
+	const gchar *matr;
+	const gchar *marca;
+	int numid;
+	int idfor;
+	int i;
+	GtkWidget *combo;
+	GtkWidget *entr_matricula2;
+	GtkWidget *entr_marca2;
+	struct coche *c1;
+	struct coche *c2;
+	
+	c1 = curso_coche_alloc();
+	c2 = curso_coche_alloc(); 
+	
+	obj = (GObject **)data;
+	
+	combo = (GtkWidget *)obj[2];
+	entr_matricula2 = (GtkWidget *)obj[3];
+	entr_marca2 = (GtkWidget *)obj[4];
+	
+	id = gtk_combo_box_text_get_active_text((GtkComboBoxText *) combo);
+	matr = gtk_entry_get_text((GtkEntry *)entr_matricula2);
+	marca = gtk_entry_get_text((GtkEntry *)entr_marca2);
+	
+	if( id != NULL){
+		
+		numid = atoi(id);
+		
+		for(i = 0; i < coches; i++){
+			
+			c1 = curso_concesionario_attr_get_coche(con, CURSO_CONCESIONARIO_ATTR_COCHE, i);
+			
+			idfor = curso_coche_attr_get_u32(c1, CURSO_COCHE_ATTR_ID);
+			
+			if(idfor == numid)
+				break;
+			
+		}
+		
+		curso_concesionario_attr_unset_coche(con, i);
+		
+		curso_coche_attr_set_u32(c2, CURSO_COCHE_ATTR_ID, numid);
+		curso_coche_attr_set_str(c2, CURSO_COCHE_ATTR_MATRICULA, matr);
+		curso_coche_attr_set_str(c2, CURSO_COCHE_ATTR_MARCA, marca);
+		
+		curso_concesionario_attr_set_coche(con, CURSO_CONCESIONARIO_ATTR_COCHE, c2);
+		
+		gtk_widget_destroy((GtkWidget *)obj[0]);
+		nueva_ventana();
+		
+	}
+	
+}
\ No newline at end of file
-- 
1.9.1

